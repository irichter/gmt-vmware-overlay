diff -Naur work.orig/vmblock-only/linux/dentry.c work/vmblock-only/linux/dentry.c
--- work.orig/vmblock-only/linux/dentry.c	2015-02-12 16:00:28.788144067 +0100
+++ work/vmblock-only/linux/dentry.c	2015-02-12 16:25:00.114094107 +0100
@@ -63,7 +63,13 @@
                    struct nameidata *nd)   // IN: lookup flags & intent
 {
    VMBlockInodeInfo *iinfo;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    struct nameidata actualNd;
+#else
+   struct path path;
+#endif
+
    struct dentry *actualDentry;
    int ret;
 
@@ -104,6 +110,7 @@
       return actualDentry->d_op->d_revalidate(actualDentry, nd);
    }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    if (compat_path_lookup(iinfo->name, 0, &actualNd)) {
       LOG(4, "DentryOpRevalidate: [%s] no longer exists\n", iinfo->name);
       return 0;
@@ -111,6 +118,14 @@
    ret = compat_vmw_nd_to_dentry(actualNd) &&
          compat_vmw_nd_to_dentry(actualNd)->d_inode;
    compat_path_release(&actualNd);
+#else
+   if (kern_path(iinfo->name, 0, &path)) {
+      LOG(4, "DentryOpRevalidate: [%s] no longer exists\n", iinfo->name);
+      return 0;
+   }
+   ret = path.dentry && path.dentry->d_inode;
+   path_put(&path);
+#endif
 
    LOG(8, "DentryOpRevalidate: [%s] %s revalidated\n",
        iinfo->name, ret ? "" : "not");
diff -Naur work.orig/vmblock-only/linux/file.c work/vmblock-only/linux/file.c
--- work.orig/vmblock-only/linux/file.c	2015-02-12 16:00:28.789144074 +0100
+++ work/vmblock-only/linux/file.c	2015-02-12 16:21:40.872753059 +0100
@@ -132,7 +132,11 @@
     * and that would try to acquire the inode's semaphore; if the two inodes
     * are the same we'll deadlock.
     */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    if (actualFile->f_dentry && inode == actualFile->f_dentry->d_inode) {
+#else
+   if (actualFile->f_path.dentry && inode == actualFile->f_path.dentry->d_inode) {
+#endif
       Warning("FileOpOpen: identical inode encountered, open cannot succeed.\n");
       if (filp_close(actualFile, current->files) < 0) {
          Warning("FileOpOpen: unable to close opened file.\n");
diff -Naur work.orig/vmblock-only/linux/filesystem.c work/vmblock-only/linux/filesystem.c
--- work.orig/vmblock-only/linux/filesystem.c	2015-02-12 16:00:28.789144074 +0100
+++ work/vmblock-only/linux/filesystem.c	2015-02-12 16:21:40.873753066 +0100
@@ -322,7 +322,12 @@
 {
    VMBlockInodeInfo *iinfo;
    struct inode *inode;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    struct nameidata actualNd;
+#else
+   struct path path;
+#endif
 
    ASSERT(sb);
 
@@ -343,7 +348,11 @@
       goto error_inode;
    }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    if (compat_path_lookup(iinfo->name, 0, &actualNd)) {
+#else
+   if (kern_path(iinfo->name, 0, &path)) {
+#endif
       /*
        * This file does not exist, so we create an inode that doesn't know
        * about its underlying file.  Operations that create files and
@@ -354,8 +363,13 @@
       return inode;
    }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    iinfo->actualDentry = compat_vmw_nd_to_dentry(actualNd);
    compat_path_release(&actualNd);
+#else
+   iinfo->actualDentry = path.dentry;
+   path_put(&path);
+#endif
 
    return inode;
 
diff -Naur work.orig/vmnet-only/driver.c work/vmnet-only/driver.c
--- work.orig/vmnet-only/driver.c	2015-02-12 16:00:28.784144040 +0100
+++ work/vmnet-only/driver.c	2015-02-12 16:21:40.873753066 +0100
@@ -265,10 +265,17 @@
 {
    int ret = -ENOTTY;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    if (filp && filp->f_op && filp->f_op->ioctl == VNetFileOpIoctl) {
       ret = VNetFileOpIoctl(filp->f_dentry->d_inode, filp, iocmd, ioarg);
    }
    return ret;
+#else 
+   if (filp && filp->f_op && filp->f_op->ioctl == VNetFileOpIoctl) {
+      ret = VNetFileOpIoctl(filp->f_path.dentry->d_inode, filp, iocmd, ioarg);
+   }
+   return ret;
+#endif
 }
 
 
@@ -1191,11 +1198,19 @@
    struct inode *inode = NULL;
    long err;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    if (filp && filp->f_dentry) {
       inode = filp->f_dentry->d_inode;
    }
    err = VNetFileOpIoctl(inode, filp, iocmd, ioarg);
    return err;
+#else 
+   if (filp && filp->f_path.dentry) {
+      inode = filp->f_path.dentry->d_inode;
+   }
+   err = VNetFileOpIoctl(inode, filp, iocmd, ioarg);
+   return err;
+#endif
 }
 #endif
 
diff -Naur work.orig/vmnet-only/userif.c work/vmnet-only/userif.c
--- work.orig/vmnet-only/userif.c	2015-02-12 16:00:28.785144046 +0100
+++ work/vmnet-only/userif.c	2015-02-12 16:21:40.874753072 +0100
@@ -523,7 +523,13 @@
       .iov_base = buf,
       .iov_len  = len,
    };
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 19, 0)
    return skb_copy_datagram_iovec(skb, 0, &iov, len);
+#else
+   struct iov_iter to;
+   iov_iter_init(&to, READ, &iov, 1, len);
+   return skb_copy_datagram_iter(skb, 0, &to, len);
+#endif
 }
 
 
